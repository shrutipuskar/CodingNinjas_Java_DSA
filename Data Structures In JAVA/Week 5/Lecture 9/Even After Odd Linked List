/*Problem statement
For a given singly linked list of integers, arrange the nodes such that all the even number nodes are placed after the all odd number nodes. The relative order of the odd and even terms should remain unchanged.

Note :
1. No need to print the linked list, it has already been taken care. Only return the new head to the list.
2. Don't create a new linked list.
3.  Just change the data, instead rearrange the provided list.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
1
1 4 5 2 -1
Sample Output 1 :
1 5 4 2 
Sample Input 2 :
2
1 11 3 6 8 0 9 -1
10 20 30 40 -1
Sample Output 2 :
1 11 3 9 6 8 0
10 20 30 40*/

/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/


	public class Solution {

    public static Node<Integer> evenAfterOdd(Node<Integer> head) {
        if (head == null || head.next == null)
            return head;

        // Initialize pointers for odd and even nodes
        Node<Integer> eHead = null;
        Node<Integer> oHead = null;
        Node<Integer> eTail = null;
        Node<Integer> oTail = null;

        // Traverse the original list and rearrange the nodes
        while (head != null) {
            if (head.data % 2 == 1) { // Odd node
                if (oHead == null) { // First odd node encountered
                    oHead = head;
                    oTail = head;
                } else { // Append odd node to the end
                    oTail.next = head;
                    oTail = oTail.next;
                }
            } else { // Even node
                if (eHead == null) { // First even node encountered
                    eHead = head;
                    eTail = head;
                } else { // Append even node to the end
                    eTail.next = head;
                    eTail = eTail.next;
                }
            }
            head = head.next;
        }

        // If no even nodes, return the original list
        if (eHead == null)
        {
            if(oHead==null)
                return null;
            return oHead;
        }
        else{
            if(oHead==null)
                return eHead;
        }
        

        // Connect the end of odd list to the beginning of even list
        oTail.next = eHead;

        // Mark the end of even list
        eTail.next = null;

        // Return the head of the rearranged list
        return oHead;
    }
}
